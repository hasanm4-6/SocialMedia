;
(function() {
  var root = this;

  var Ope = function(obj) {
    if (this instanceof Ope) {
      this.obj = obj;
    } else {
      return new Ope(obj);
    }
  };

  Ope.prototype = {
    constructor: Ope,

    inherit: function(SubType, SuperType) {
      if (typeof Object.create !== 'function') {
        var prototype = Object(SuperType.prototype);
        prototype.constructor = SubType;
        SubType.prototype = prototype;
      } else {
        SubType.prototype = Object.create(SuperType.prototype);
        SubType.prototype.constructor = SubType;
      }
    },
    extend: function(SuperType) {
      var SubType = function(args) {
        SuperType.call(this, args);
      };
      SubType.prototype = new SuperType();
      SubType.prototype.constructor = SubType;
      return SubType;
    },
    /*
     * use:
        objHasMethod(new XMLHttpRequest(), 'send') //true
     */
    objHasMethod: function(obj, property) {
      var t = typeof obj[property];
      return t === 'function' ||
        !!(t === 'obj' && obj[property]) ||
        t === 'unknown';
    },
    deepClone: function(origin) {
      var Type = {};
      for (var i = 0, type; type = ['String', 'Array', 'Number', 'Boolean', 'Function', 'Object', 'RegExp', 'Date', 'Null', 'Undefined'][i++];) {
        (function() {
          Type['is' + type] = function(obj) {
            return Object.prototype.toString.call(obj) === '[object' + type + ']';
          };
        })(type);
      }
      var target = Type.isArray(origin) ? [] : {};

      (function clone() {
        if (origin && Type.isObject(origin)) {
          for (var key in origin) {
            if (origin.hasOwnProperty(key)) {
              if (origin[key] && Type.isObject(origin[key])) {
                target[key] = clone(origin[key]);
              } else {
                target[key] = origin[key];
              }
            }
          }
        } else if (origin && Type.isArray(origin)) {
          for (var j = 0, len = origin.length; j < len; j++) {
            if (origin[j] && Type.isObject(origin[j])) {
              target[j] = clone(origin[j]);
            } else {
              target[j] = origin[j];
            }
          }
        } else {
          target = JSON.parse(JSON.stringify(origin));
        }
      })(origin);
      return target;
    },
    /*event Entrust:
        eventUtil.addEvent(element, 'click', function(event) {
            var e = eventUtil.getEvent(event);
            var target = eventUtil.getTarget(e);

            switch(target.id) {
                case 'xx'
                    //TODO
            }
        })
     */
    eventUtil: {
      getEvent: function(event) {
        return event ? event : window.event;
      },
      getTarget: function(event) {
        return event.target || event.srcElement;
      },
      preventDefault: function(event) {
        if (event.preventDefault) {
          event.preventDefault();
        } else {
          event.returnValue = false;
        }
      },
      stopPropagation: function(event) {
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          event.cancelBubble = true;
        }
      },
      addEvent: (function(element, type, handler) {
        if (typeof addEventListener !== 'undefined') {
          return function(element, type, handler) {
            element.addEventListener(type, handler, false);
          };
        } else if (typeof attachEvent !== 'undefined') {
          return function(element, type, handler) {
            element.attachEvent('on' + type, handler);
          };
        } else {
          return function(element, type, handler) {
            element['on' + type] = handler;
          };
        }
      })(),
      removeEvent: (function(element, type, handler) {
        if (typeof removeEventListener !== 'undefined') {
          return function(element, type, handler) {
            element.removeEventListener(type, handler, false);
          };
        } else if (typeof detachEvent !== 'undefined') {
          return function(element, type, handler) {
            element.detachEvent('on' + type, handler);
          };
        } else {
          return function(element, type, handler) {
            element['on' + type] = null;
          };
        }
      })()
    },
    /*
     * use:
        eventEmitter.emit('message', data})
        eventEmitter.on('message', fn)
     */
    eventEmitter: (function() {
      var Emitter = function() {
        this.events = {};
      };
      Emitter.prototype = {
        constructor: Emitter,
        emit: function() {
          var eventType = Array.prototype.shift.call(arguments),
            fns = this.events[eventType];
          if (!fns || fns.length === 0) {
            return false;
          }
          for (var i = 0, fn; fn = fns[i++];) {
            fn.apply(this, arguments);
          }
        },
        on: function(type, fn) {
          if (typeof this.events[type] === 'undefined') {
            this.events[type] = [];
          }
          this.events[type].push(fn);
        },
        remove: function(type, fn) {
          var fns = this.events[type];
          if (typeof fns === 'undefined') {
            return false;
          }
          if (fns && typeof fn === 'undefined') {
            fns.length = 0;
          } else {
            for (var len = fns.length - 1; len >= 0; len--) {
              var _fn = fns[len];
              if (_fn === fn) {
                fns.splice(len, 1);
              }
            }
          }
        }
      };
      return new Emitter();
    })(),
    /*
     * @ data { Number } : 20180208
     * @ daysNumber { Number } : 16
     */
    addDays: function(date, daysNumber) {
      var day = new Date(+((date + '').split('').slice(0, 4).join('')), (date + '').split('').slice(4, 6).join('') - 1, +((date + '').split('').slice(6, 8).join('')));
      var daysAdded = new Date(day.valueOf() + daysNumber * 24 * 60 * 60 * 1000);
      var y = daysAdded.getFullYear(),
        m = (daysAdded.getMonth() + 1) <= 9 ? ('0' + (daysAdded.getMonth() + 1)) : (daysAdded.getMonth() + 1),
        d = daysAdded.getDate() <= 9 ? ('0' + daysAdded.getDate()) : daysAdded.getDate();
      return +(y + '' + m + '' + d);
    },
    addUrlParam: function(url, obj) {
      for (var i in obj) {
        url += (url.indexOf('?') === -1 ? '?' : '&');
        url += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
      }
      return url;
    },
    format: function(num) {
      var newNum = String(num);
      var re = /(-?\d+)(\d{3})/;
      while (re.test(newNum)) {
        newNum = newNum.replace(re, '$1,$2');
      }
      return newNum;
    },
    parseUrl: function(url) {
      var queryString = url.split('?')[1].split('#')[0];
      var params = queryString.split('&');
      var obj = {};
      for (var i = 0, len = params.length; i < len; i++) {
        var item = params[i].split('=');
        obj[item[0]] = item[1];
      }
      return obj;
    },
    unique: function(arr) {
      if (typeof Set !== 'undefined') {
        return Array.from(new Set(arr));
      } else {
        var tmp = {},
          ret = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          if (!tmp[arr[i]]) {
            tmp[arr[i]] = 1;
            ret.push(arr[i]);
          }
        }
        return ret;
      }
    },
    sum: function() {
      var tmp = Array.prototype.slice.apply(arguments).map(function(item) {
        if (typeof item !== 'number' && typeof item !== 'string') {
          return 0;
        } else if (isNaN(Number(item))) {
          return 0;
        } else {
          return Number(item);
        }
      });
      return tmp.reduce(function(pre, cur) {
        return parseInt((pre + cur) * 10, 10) / 10;
      });
    },
    createXHR: (function() {
      if (typeof XMLHttpRequest !== 'undefined') {
        return function() {
          return new XMLHttpRequest();
        };
      } else if (typeof ActiveXObject !== 'undefined') {
        return function() {
          if (typeof arguments.callee.activeXString !== 'string') {
            var versions = ['MSXML2.XMLHttp.6.0', 'MSXML2.XMLHttp.3.0',
                'MSXML2.XMLHttp'
              ],
              i, len;
            for (i = 0; len < versions.length; i++) {
              try {
                new ActiveXObject(versions[i]);
                arguments.callee.activeXString = versions[i];
                break;
              } catch (ex) {
                throw new Error(ex);
              }
            }

            return new ActiveXObject(arguments.callee.activeXString);
          }
        };
      } else {
        return function() {
          throw new Error('No XHR object available.');
        };
      }
    })(),
    /*
     * use :
        http('example.com').get().then(fn, fn})
        http('example.com').post({
            data: ''
        }).then(fn, fn)
     */
    http: function(url) {
      var xhr = this.createXHR();
      var core = {
        ajax: function(method, url, requestData) {
          if (typeof fetch !== 'undefined') {
            return fetch(url, requestData ? {
              method: method,
              headers: {
                'Content-Type': 'application/json'
              },
              body: requestData
            } : null).then(function(response) {
              return response.json();
            });
          }
          return new Promise(function(resolve, reject) {
            xhr.onreadystatechange = function() {
              if (xhr.readyState === 4) {
                try {
                  if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {
                    resolve(xhr.responseText);
                  } else {
                    reject(xhr.statusText);
                  }
                } catch (err) {
                  reject(err);
                }
              }
            };
            xhr.open(method, url, true);
            xhr.send(requestData ? requestData : null);
            xhr.onerror = function() {
              reject(xhr.statusText);
            };
          });
        }
      };
      return {
        get: function() {
          return core.ajax('GET', url);
        },
        post: function(requestData) {
          return core.ajax('POST', url, requestData);
        },
        put: function(requestData) {
          return core.ajax('PUT', url, requestData);
        },
        patch: function(requestData) {
          return core.ajax('PATCH', url, requestData);
        },
        delete: function() {
          return core.ajax('DELETE', url);
        }
      };
    }
  };

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = new Ope();
    }
  } else {
    root.ope = new Ope();
  }
}).call(this);